{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tkx/Desktop/CS3219_OTOT_B/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tkx/Desktop/CS3219_OTOT_B/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/tkx/Desktop/CS3219_OTOT_B/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/tkx/Desktop/CS3219_OTOT_B/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/tkx/Desktop/CS3219_OTOT_B/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tkx/Desktop/CS3219_OTOT_B/frontend/src/components/Forms/FoodForm.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Button, Form, FormGroup, FormFeedback, Label, Input } from 'reactstrap';\n\nfunction FoodForm(props) {\n  var _useState = useState({\n    id: '',\n    foodname: '',\n    expirydate: '',\n    person: '',\n    phone: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      form = _useState2[0],\n      setForm = _useState2[1];\n\n  var handleInputChange = function handleInputChange(e) {\n    console.log(e.target.value);\n    setForm(_objectSpread({}, form, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var checkEmptyInput = function checkEmptyInput(input) {\n    var inputStatus;\n\n    switch (input) {\n      case \"foodname\":\n        inputStatus = form.foodname === '';\n        break;\n\n      case \"expirydate\":\n        inputStatus = form.expirydate === '';\n        break;\n\n      default:\n        inputStatus = form.foodname === '' || form.expirydate === '';\n    }\n\n    return inputStatus;\n  };\n\n  var submitFormAdd =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(e) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"http://localhost:8080/api/food\", {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  foodname: form.foodname,\n                  expirydate: form.expirydate,\n                  person: form.person,\n                  phone: form.phone\n                })\n              });\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              data = _context.sent;\n              props.addFood(data);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function submitFormAdd(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var submitFormEdit =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(e) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch(\"http://localhost:8080/api/food/\".concat(form.id), {\n                method: 'PUT',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  id: form.id,\n                  foodname: form.foodname,\n                  expirydate: form.expirydate,\n                  person: form.person,\n                  phone: form.phone\n                })\n              });\n\n            case 2:\n              response = _context2.sent;\n              _context2.next = 5;\n              return response.json();\n\n            case 5:\n              data = _context2.sent;\n              props.updateFood(data);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function submitFormEdit(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (props.item) {\n      var _props$item = props.item,\n          id = _props$item.id,\n          foodname = _props$item.foodname,\n          expirydate = _props$item.expirydate,\n          person = _props$item.person,\n          phone = _props$item.phone;\n      setForm({\n        id: id,\n        foodname: foodname,\n        expirydate: expirydate,\n        person: person,\n        phone: phone\n      });\n    }\n  }, [form]);\n  return React.createElement(Form, {\n    onSubmit: props.item ? submitFormEdit : submitFormAdd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Food Name\"), React.createElement(Input, {\n    type: \"text\",\n    name: \"foodname\",\n    id: \"foodname\",\n    onChange: handleInputChange,\n    value: form.foodname,\n    valid: !checkEmptyInput('foodname'),\n    invalid: checkEmptyInput('foodname'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(FormFeedback, {\n    invalid: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"* Required Field\")), React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(Label, {\n    for: \"expirydate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Expiry Date\"), React.createElement(Input, {\n    type: \"date\",\n    name: \"expirydate\",\n    id: \"expirydate\",\n    onChange: handleInputChange,\n    value: form.expirydate,\n    valid: !checkEmptyInput('expirydate'),\n    invalid: checkEmptyInput('expirydate'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(FormFeedback, {\n    invalid: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"* Required Field\")), React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Label, {\n    for: \"person\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Person\"), React.createElement(Input, {\n    type: \"text\",\n    name: \"person\",\n    id: \"person\",\n    onChange: handleInputChange,\n    value: form.person,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })), React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(Label, {\n    for: \"phone\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"Phone\"), React.createElement(Input, {\n    type: \"text\",\n    name: \"phone\",\n    id: \"phone\",\n    onChange: handleInputChange,\n    value: form.phone,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })), React.createElement(Button, {\n    color: \"primary\",\n    disabled: checkEmptyInput(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Submit\"));\n}\n\nexport default FoodForm;","map":{"version":3,"sources":["/Users/tkx/Desktop/CS3219_OTOT_B/frontend/src/components/Forms/FoodForm.js"],"names":["React","useState","useEffect","Button","Form","FormGroup","FormFeedback","Label","Input","FoodForm","props","id","foodname","expirydate","person","phone","form","setForm","handleInputChange","e","console","log","target","value","name","checkEmptyInput","input","inputStatus","submitFormAdd","fetch","method","headers","body","JSON","stringify","response","json","data","addFood","submitFormEdit","updateFood","item"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, Form, FormGroup, FormFeedback, Label, Input } from 'reactstrap';\n\nfunction FoodForm(props) {\n  const [form, setForm] = useState({\n    id: '',\n    foodname: '',\n    expirydate: '',\n    person: '',\n    phone: '',\n  })\n\n  const handleInputChange = e => {\n    console.log(e.target.value)\n    setForm({\n      ...form,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  const checkEmptyInput = (input) => {\n    let inputStatus;\n      switch (input) {\n        case \"foodname\":\n          inputStatus = form.foodname === ''\n          break\n        case \"expirydate\":\n          inputStatus = form.expirydate === ''\n          break\n        default:\n          inputStatus = form.foodname === '' || form.expirydate === ''\n      }\n      return inputStatus\n  }\n  \n\n  const submitFormAdd = async (e) => {\n    const response = await fetch(`http://localhost:8080/api/food`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        foodname: form.foodname,\n        expirydate: form.expirydate,\n        person: form.person,\n        phone: form.phone,\n      })\n    })\n\n    const data = await response.json()\n    props.addFood(data)\n  }\n\n\n  const submitFormEdit = async (e) => {\n    const response = await fetch(`http://localhost:8080/api/food/${form.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        id: form.id,\n        foodname: form.foodname,\n        expirydate: form.expirydate,\n        person: form.person,\n        phone: form.phone,\n      })\n    })\n    const data = await response.json()\n    props.updateFood(data)\n  }\n\n  useEffect(() => {\n    if (props.item) {\n      const { id, foodname, expirydate, person, phone } = props.item\n      setForm({ id, foodname, expirydate, person, phone })\n    }\n  }, [form])\n\n  return (\n    <Form onSubmit={props.item ? submitFormEdit : submitFormAdd}>\n      <FormGroup>\n        <Label>Food Name</Label>\n        <Input type=\"text\" name=\"foodname\" id=\"foodname\" onChange={handleInputChange} value={form.foodname}\n        valid={!checkEmptyInput('foodname')}\n        invalid={checkEmptyInput('foodname')}/>\n        <FormFeedback invalid>* Required Field</FormFeedback>\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"expirydate\">Expiry Date</Label>\n        <Input type=\"date\" name=\"expirydate\" id=\"expirydate\" onChange={handleInputChange} value={form.expirydate}\n         valid={!checkEmptyInput('expirydate')}\n         invalid={checkEmptyInput('expirydate')} />\n         <FormFeedback invalid>* Required Field</FormFeedback>\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"person\">Person</Label>\n        <Input type=\"text\" name=\"person\" id=\"person\" onChange={handleInputChange} value={form.person} />\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"phone\">Phone</Label>\n        <Input type=\"text\" name=\"phone\" id=\"phone\" onChange={handleInputChange} value={form.phone}/>\n      </FormGroup>\n      <Button color=\"primary\" disabled={checkEmptyInput()}>Submit</Button>\n    </Form>\n  )\n}\n\nexport default FoodForm"]},"metadata":{},"sourceType":"module"}